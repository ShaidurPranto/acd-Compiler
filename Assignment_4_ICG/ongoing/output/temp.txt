.CODE

main PROC
    ;initialize data segment
    MOV AX, @DATA
    MOV DS, AX
	;preserve base pointer
    PUSH BP
    MOV BP, SP
    SUB SP, 2    ; Line 2
    SUB SP, 2    ; Line 2
    SUB SP, 2    ; Line 2
    SUB SP, 2    ; Line 2
    SUB SP, 2    ; Line 2
    MOV BX, 3    ; Line 3
    MOV AX, 2    ; Line 3
    ADD AX, BX    ; Line 3
    PUSH AX    ; Line 3
    POP BX    ; Line 3
    MOV AX, 1    ; Line 3
    IMUL BL    ; Line 3
    PUSH AX    ; Line 3
    MOV BX, 3    ; Line 3
    POP AX    ; Line 3
    DIV BL    ; Line 3
    XOR CX, CX    ; Line 3
    MOV CL, AH    ; Line 3
    MOV AX, CX    ; Line 3
    PUSH AX    ; Line 3
    POP AX    ; Line 3
    MOV [BP - 2], AX    ; Line 3
	L0:
    MOV BX, 5    ; Line 4
    MOV AX, 1    ; Line 4
    CMP AX, BX    ; Line 4
	JL L1
    JMP L2
    L1:
    MOV AX, 1    ; Line 4
    MOV [BP - 4], AX    ; Line 4
    JMP L3
    L2:
    MOV AX, 0    ; Line 4
    MOV [BP - 4], AX    ; Line 4
    L3:
    MOV AX, 2    ; Line 5
    MOV [BP - 10], AX    ; Line 5
	L4:
    MOV AX, [BP - 2]
	CMP AX, 0
	JNE L8
    JMP L10
	L8:
    MOV AX, [BP - 4]
	CMP AX, 0
	JNE L9
    JMP L10
	;DEBUG: Changing label: L7 to: L8
	;DEBUG: Changing label: L5 to: L8

	;DEBUG: Changing label: L6 to: L10
    L9:
	JMP L13
	L12:
    MOV AX, [BP - 10]    ; Line 7
    ADD AX, 1    ; Line 7
    MOV [BP - 10], AX    ; Line 7
    JMP L14
    L13:
    JMP L12
    L14:
	;DEBUG: Changing label: L13 to: L14

    JMP L11
    L10:
    MOV AX, [BP - 10]    ; Line 9
    MOV [BP - 12], AX    ; Line 9
    L11:
    MOV AX, [BP - 2]    ; Line 10
    CALL print_output    ; Line 10
    CALL new_line    ; Line 10
    MOV AX, [BP - 4]    ; Line 11
    CALL print_output    ; Line 11
    CALL new_line    ; Line 11
	;restore stack pointer
    ADD SP, 2
    ADD SP, 2
    ADD SP, 2
    ADD SP, 2
    ADD SP, 2
	;restore base pointer
    POP BP
    ;exit program
    MOV AX,4CH
    INT 21H
main ENDP


new_line proc
    push ax
    push dx
    mov ah,2
    mov dl,0Dh
    int 21h
    mov ah,2
    mov dl,0Ah
    int 21h
    pop dx
    pop ax
    ret
new_line endp
print_output proc  ;print what is in ax
    push ax
    push bx
    push cx
    push dx
    push si
    lea si,number
    mov bx,10
    add si,4
    cmp ax,0
    jnge negate
print:
    xor dx,dx
    div bx
    mov [si],dl
    add [si],'0'
    dec si
    cmp ax,0
    jne print
    inc si
    lea dx,si
    mov ah,9
    int 21h
    pop si
    pop dx
    pop cx
    pop bx
    pop ax
    ret
negate:
    push ax
    mov ah,2
    mov dl,'-'
    int 21h
    pop ax
    neg ax
    jmp print
print_output endp

END
