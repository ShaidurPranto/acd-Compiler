Line# 1: Token <INT> Lexeme int
Line# 1: Token <ID> Lexeme main
Line# 1: Token <LPAREN> Lexeme (
Line# 1: Token <RPAREN> Lexeme )
Line# 1: Token <LCURL> Lexeme {
Line# 3: Token <INT> Lexeme int
Line# 3: Token <ID> Lexeme i
Line# 3: Token <COMMA> Lexeme ,
Line# 3: Token <ID> Lexeme j
Line# 3: Token <COMMA> Lexeme ,
Line# 3: Token <ID> Lexeme k
Line# 3: Token <COMMA> Lexeme ,
Line# 3: Token <ID> Lexeme ll
Line# 3: Token <SEMICOLON> Lexeme ;
Line# 5: Token <FOR> Lexeme for
Line# 5: Token <LPAREN> Lexeme (
Line# 5: Token <ID> Lexeme i
Line# 5: Token <ASSIGNOP> Lexeme =
Line# 5: Token <CONST_INT> Lexeme 0
Line# 5: Token <SEMICOLON> Lexeme ;
Line# 5: Token <ID> Lexeme i
Line# 5: Token <CONST_INT> Lexeme 6
Line# 5: Token <SEMICOLON> Lexeme ;
Line# 5: Token <ID> Lexeme i
Line# 5: Token <INCOP> Lexeme ++
Line# 5: Token <RPAREN> Lexeme )
Line# 5: Token <LCURL> Lexeme {
Line# 6: Token <PRINTLN> Lexeme println
Line# 6: Token <LPAREN> Lexeme (
Line# 6: Token <ID> Lexeme i
Line# 6: Token <RPAREN> Lexeme )
Line# 6: Token <SEMICOLON> Lexeme ;
Line# 7: Token <RCURL> Lexeme }
Line# 9: Token <ID> Lexeme k
Line# 9: Token <ASSIGNOP> Lexeme =
Line# 9: Token <CONST_INT> Lexeme 4
Line# 9: Token <SEMICOLON> Lexeme ;
Line# 10: Token <ID> Lexeme ll
Line# 10: Token <ASSIGNOP> Lexeme =
Line# 10: Token <CONST_INT> Lexeme 6
Line# 10: Token <SEMICOLON> Lexeme ;
Line# 11: Token <WHILE> Lexeme while
Line# 11: Token <LPAREN> Lexeme (
Line# 11: Token <ID> Lexeme k
Line# 11: Token <CONST_INT> Lexeme 0
Line# 11: Token <RPAREN> Lexeme )
Line# 11: Token <LCURL> Lexeme {
Line# 12: Token <ID> Lexeme ll
Line# 12: Token <ASSIGNOP> Lexeme =
Line# 12: Token <ID> Lexeme ll
Line# 12: Token <ADDOP> Lexeme +
Line# 12: Token <CONST_INT> Lexeme 3
Line# 12: Token <SEMICOLON> Lexeme ;
Line# 13: Token <ID> Lexeme k
Line# 13: Token <DECOP> Lexeme --
Line# 13: Token <SEMICOLON> Lexeme ;
Line# 14: Token <RCURL> Lexeme }
Line# 16: Token <PRINTLN> Lexeme println
Line# 16: Token <LPAREN> Lexeme (
Line# 16: Token <ID> Lexeme ll
Line# 16: Token <RPAREN> Lexeme )
Line# 16: Token <SEMICOLON> Lexeme ;
Line# 17: Token <PRINTLN> Lexeme println
Line# 17: Token <LPAREN> Lexeme (
Line# 17: Token <ID> Lexeme k
Line# 17: Token <RPAREN> Lexeme )
Line# 17: Token <SEMICOLON> Lexeme ;
Line# 19: Token <ID> Lexeme k
Line# 19: Token <ASSIGNOP> Lexeme =
Line# 19: Token <CONST_INT> Lexeme 4
Line# 19: Token <SEMICOLON> Lexeme ;
Line# 20: Token <ID> Lexeme ll
Line# 20: Token <ASSIGNOP> Lexeme =
Line# 20: Token <CONST_INT> Lexeme 6
Line# 20: Token <SEMICOLON> Lexeme ;
Line# 22: Token <WHILE> Lexeme while
Line# 22: Token <LPAREN> Lexeme (
Line# 22: Token <ID> Lexeme k
Line# 22: Token <DECOP> Lexeme --
Line# 22: Token <RPAREN> Lexeme )
Line# 22: Token <LCURL> Lexeme {
Line# 23: Token <ID> Lexeme ll
Line# 23: Token <ASSIGNOP> Lexeme =
Line# 23: Token <ID> Lexeme ll
Line# 23: Token <ADDOP> Lexeme +
Line# 23: Token <CONST_INT> Lexeme 3
Line# 23: Token <SEMICOLON> Lexeme ;
Line# 24: Token <RCURL> Lexeme }
Line# 26: Token <PRINTLN> Lexeme println
Line# 26: Token <LPAREN> Lexeme (
Line# 26: Token <ID> Lexeme ll
Line# 26: Token <RPAREN> Lexeme )
Line# 26: Token <SEMICOLON> Lexeme ;
Line# 27: Token <PRINTLN> Lexeme println
Line# 27: Token <LPAREN> Lexeme (
Line# 27: Token <ID> Lexeme k
Line# 27: Token <RPAREN> Lexeme )
Line# 27: Token <SEMICOLON> Lexeme ;
Line# 30: Token <RETURN> Lexeme return
Line# 30: Token <CONST_INT> Lexeme 0
Line# 30: Token <SEMICOLON> Lexeme ;
Line# 31: Token <RCURL> Lexeme }
