.MODEL SMALL
.STACK 1000H
.DATA
    number DB "00000$"
.CODE
main PROC
    ;initialize data segment
    MOV AX, @DATA
    MOV DS, AX
	;preserve base pointer
    PUSH BP
    MOV BP, SP
    SUB SP, 2    ; Line 3
    SUB SP, 2    ; Line 3
    SUB SP, 2    ; Line 3
    SUB SP, 2    ; Line 3
    MOV AX, 0    ; Line 5
    MOV [BP - 0], AX    ; Line 5
	L2:
    MOV BX, 6    ; Line 5
    MOV AX, [BP - 0]    ; Line 5
    CMP AX, BX    ; Line 5
	JL L3    ; Line 5
    JMP L4
    L3:
	JMP L1
	L0:
	JMP L7
	L6:
    MOV AX, [BP - 0]    ; Line 5
    ADD AX, 1    ; Line 5
    MOV [BP - 0], AX    ; Line 5
    JMP L8
    L7:
    JMP L6
    L8:
	;DEBUG: changing label: L7 ,to: L8 ,from line no: 29

    JMP L2
	L1:
    MOV AX, [BP - 0]    ; Line 6
    CALL print_output    ; Line 6
    CALL new_line    ; Line 6
	JMP L0
	L4:
    MOV AX, 4    ; Line 9
    MOV [BP - 4], AX    ; Line 9
    MOV AX, 6    ; Line 10
    MOV [BP - 6], AX    ; Line 10
	L9:
    MOV BX, 0    ; Line 11
    MOV AX, [BP - 4]    ; Line 11
    CMP AX, BX    ; Line 11
	JG L10    ; Line 11
    JMP L11
    L10:
    MOV BX, 3    ; Line 12
    MOV AX, [BP - 6]    ; Line 12
    ADD AX, BX    ; Line 12
    PUSH AX    ; Line 12
    POP AX    ; Line 12
    MOV [BP - 6], AX    ; Line 12
	JMP L14
	L13:
    MOV AX, [BP - 4]    ; Line 13
    SUB AX, 1    ; Line 13
    MOV [BP - 4], AX    ; Line 13
    JMP L15
    L14:
    JMP L13
    L15:
	;DEBUG: changing label: L14 ,to: L15 ,from line no: 65

    JMP L9
    L11:
    MOV AX, [BP - 6]    ; Line 16
    CALL print_output    ; Line 16
    CALL new_line    ; Line 16
    MOV AX, [BP - 4]    ; Line 17
    CALL print_output    ; Line 17
    CALL new_line    ; Line 17
    MOV AX, 4    ; Line 19
    MOV [BP - 4], AX    ; Line 19
    MOV AX, 6    ; Line 20
    MOV [BP - 6], AX    ; Line 20
	JMP L17
	L16:
    MOV AX, [BP - 4]    ; Line 22
    SUB AX, 1    ; Line 22
    MOV [BP - 4], AX    ; Line 22
    JMP L17
    L17:
	L18:
    MOV AX, [BP - 4]    ; Line 22
	CMP AX, 0    ; Line 22
	JNE L19    ; Line 22
    JMP L20
    L19:
    MOV BX, 3    ; Line 23
    MOV AX, [BP - 6]    ; Line 23
    ADD AX, BX    ; Line 23
    PUSH AX    ; Line 23
    POP AX    ; Line 23
    MOV [BP - 6], AX    ; Line 23
    JMP L16
    L20:
    MOV AX, [BP - 4]
    SUB AX, 1
    MOV [BP - 4], AX
    MOV AX, [BP - 6]    ; Line 26
    CALL print_output    ; Line 26
    CALL new_line    ; Line 26
    MOV AX, [BP - 4]    ; Line 27
    CALL print_output    ; Line 27
    CALL new_line    ; Line 27
	;restore stack pointer
    ADD SP, 2
    ADD SP, 2
    ADD SP, 2
    ADD SP, 2
	;restore base pointer
    POP BP
    ;exit program
    MOV AX,4CH
    INT 21H
main ENDP

new_line proc
    push ax
    push dx
    mov ah,2
    mov dl,0Dh
    int 21h
    mov ah,2
    mov dl,0Ah
    int 21h
    pop dx
    pop ax
    ret
new_line endp
print_output proc  ;print what is in ax
    push ax
    push bx
    push cx
    push dx
    push si
    lea si,number
    mov bx,10
    add si,4
    cmp ax,0
    jnge negate
print:
    xor dx,dx
    div bx
    mov [si],dl
    add [si],'0'
    dec si
    cmp ax,0
    jne print
    inc si
    lea dx,si
    mov ah,9
    int 21h
    pop si
    pop dx
    pop cx
    pop bx
    pop ax
    ret
negate:
    push ax
    mov ah,2
    mov dl,'-'
    int 21h
    pop ax
    neg ax
    jmp print
print_output endp

END
