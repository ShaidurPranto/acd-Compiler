Line# 1: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 1: Token <ID> Lexeme i found
Line# 1: Token <COMMA> Lexeme , found
declaration_list : ID 
Line# 1: Token <ID> Lexeme j found
Line# 1: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID  
var_declaration : type_specifier declaration_list SEMICOLON  
unit : var_declaration  
program : unit 
Line# 2: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 2: Token <ID> Lexeme main found
Line# 2: Token <LPAREN> Lexeme ( found
Line# 2: Token <RPAREN> Lexeme ) found
Line# 2: Token <LCURL> Lexeme { found
Line# 4: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 4: Token <ID> Lexeme k found
Line# 4: Token <COMMA> Lexeme , found
declaration_list : ID 
Line# 4: Token <ID> Lexeme ll found
Line# 4: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID  
Line# 4: Token <ID> Lexeme m found
Line# 4: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID  
Line# 4: Token <ID> Lexeme n found
Line# 4: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID  
Line# 4: Token <ID> Lexeme o found
Line# 4: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID  
Line# 4: Token <ID> Lexeme p found
Line# 4: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID  
var_declaration : type_specifier declaration_list SEMICOLON  
statement : var_declaration 
statements : statement  
Line# 6: Token <ID> Lexeme i found
Line# 6: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 6: Token <CONST_INT> Lexeme 3 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 6: Token <MULOP> Lexeme * found
Line# 6: Token <CONST_INT> Lexeme 4 found
factor	: CONST_INT   
unary_expression : factor 
term :	term MULOP unary_expression 
Line# 6: Token <MULOP> Lexeme * found
Line# 6: Token <CONST_INT> Lexeme 2 found
factor	: CONST_INT   
unary_expression : factor 
term :	term MULOP unary_expression 
Line# 6: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 7: Token <PRINTLN> Lexeme println found
Line# 7: Token <LPAREN> Lexeme ( found
Line# 7: Token <ID> Lexeme i found
Line# 7: Token <RPAREN> Lexeme ) found
Line# 7: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement  
Line# 9: Token <RETURN> Lexeme return found
Line# 9: Token <CONST_INT> Lexeme 0 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 9: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
statement : RETURN expression SEMICOLON
statements : statements statement  
Line# 10: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 2
	1 --> <n, INT, Width: 2, Offset: 8, IsParam: 0, Scope: 2>
	2 --> <o, INT, Width: 2, Offset: 10, IsParam: 0, Scope: 2>
	3 --> <p, INT, Width: 2, Offset: 12, IsParam: 0, Scope: 2>





	9 --> <k, INT, Width: 2, Offset: 2, IsParam: 0, Scope: 2> --> <ll, INT, Width: 2, Offset: 4, IsParam: 0, Scope: 2>

	11 --> <m, INT, Width: 2, Offset: 6, IsParam: 0, Scope: 2>
	ScopeTable# 1

	2 --> <main, FUNCTION, Width: 0, Offset: -1, IsParam: 0, Scope: 1, RetType: INT>




	7 --> <i, INT, Width: 2, Offset: 2, IsParam: 0, Scope: 1>
	8 --> <j, INT, Width: 2, Offset: 4, IsParam: 0, Scope: 1>



func_definition : type_specifier ID LPAREN RPAREN compound_statement
unit : func_definition  
program : program unit 
start : program 

Total Lines: 12

Total Errors: 0
