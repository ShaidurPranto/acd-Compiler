start : program 	<Line: 1-7>
 program : unit 	<Line: 1-7>
  unit : func_definition 	<Line: 1-7>
   func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 1-7>
    type_specifier : INT 	<Line: 1-1>
     INT : int	<Line: 1>
    ID : main	<Line: 1>
    LPAREN : (	<Line: 1>
    RPAREN : )	<Line: 1>
    compound_statement : LCURL statements RCURL 	<Line: 1-7>
     LCURL : {	<Line: 1>
     statements : statements statement 	<Line: 2-6>
      statements : statement 	<Line: 2-5>
       statement : IF LPAREN expression RPAREN statement 	<Line: 2-5>
        IF : if	<Line: 2>
        LPAREN : (	<Line: 2>
        expression : logic_expression 	<Line: 2-2>
         logic_expression : rel_expression 	<Line: 2-2>
          rel_expression : simple_expression RELOP simple_expression 	<Line: 2-2>
           simple_expression : term 	<Line: 2-2>
            term : unary_expression 	<Line: 2-2>
             unary_expression : factor 	<Line: 2-2>
              factor : CONST_INT 	<Line: 2-2>
               CONST_INT : 2	<Line: 2>
           RELOP : <	<Line: 2>
           simple_expression : term 	<Line: 2-2>
            term : unary_expression 	<Line: 2-2>
             unary_expression : factor 	<Line: 2-2>
              factor : CONST_INT 	<Line: 2-2>
               CONST_INT : 3	<Line: 2>
        RPAREN : )	<Line: 2>
        statement : compound_statement 	<Line: 2-5>
         compound_statement : LCURL statements RCURL 	<Line: 2-5>
          LCURL : {	<Line: 2>
          statements : statements statement 	<Line: 3-4>
           statements : statement 	<Line: 3-3>
            statement : var_declaration 	<Line: 3-3>
             var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 3-3>
              type_specifier : INT 	<Line: 3-3>
               INT : int	<Line: 3>
              declaration_list : ID 	<Line: 3-3>
               ID : i	<Line: 3>
              SEMICOLON : ;	<Line: 3>
           statement : expression_statement 	<Line: 4-4>
            expression_statement : expression SEMICOLON 	<Line: 4-4>
             expression : variable ASSIGNOP logic_expression 	<Line: 4-4>
              variable : ID 	<Line: 4-4>
               ID : i	<Line: 4>
              ASSIGNOP : =	<Line: 4>
              logic_expression : rel_expression 	<Line: 4-4>
               rel_expression : simple_expression 	<Line: 4-4>
                simple_expression : term 	<Line: 4-4>
                 term : unary_expression 	<Line: 4-4>
                  unary_expression : factor 	<Line: 4-4>
                   factor : CONST_INT 	<Line: 4-4>
                    CONST_INT : 0	<Line: 4>
             SEMICOLON : ;	<Line: 4>
          RCURL : }	<Line: 5>
      statement : RETURN expression SEMICOLON 	<Line: 6-6>
       RETURN : return	<Line: 6>
       expression : logic_expression 	<Line: 6-6>
        logic_expression : rel_expression 	<Line: 6-6>
         rel_expression : simple_expression 	<Line: 6-6>
          simple_expression : term 	<Line: 6-6>
           term : unary_expression 	<Line: 6-6>
            unary_expression : factor 	<Line: 6-6>
             factor : CONST_INT 	<Line: 6-6>
              CONST_INT : 0	<Line: 6>
       SEMICOLON : ;	<Line: 6>
     RCURL : }	<Line: 7>
