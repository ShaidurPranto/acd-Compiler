.CODE

main PROC
    ;initialize data segment
    MOV AX, @DATA
    MOV DS, AX
	;preserve base pointer
    PUSH BP
    MOV BP, SP
    SUB SP, 2    ; Line 10
    SUB SP, 2    ; Line 10
    SUB SP, 2    ; Line 10
    MOV AX, 7    ; Line 11
    MOV [BP - 2], AX    ; Line 11
    MOV AX, 3    ; Line 12
    MOV [BP - 4], AX    ; Line 12
    MOV AX, [BP - 2]
    PUSH AX
    MOV AX, [BP - 4]    ; Line 14
    PUSH AX    ; Line 14
    CALL foo    ; Line 14
    PUSH AX
    POP AX    ; Line 14
    MOV [BP - 6], AX    ; Line 14
    MOV AX, [BP - 6]    ; Line 15
    CALL print_output    ; Line 15
    CALL new_line    ; Line 15
	;restore stack pointer
    ADD SP, 6	;restore base pointer
    POP BP
    ;exit program
    MOV AX,4CH
    INT 21H
main ENDP

foo PROC
	;preserve base pointer
    PUSH BP
    MOV BP, SP
    MOV BX, [BP + 4]    ; Line 2
    MOV AX, [BP + 6]    ; Line 2
    ADD AX, BX    ; Line 2
    PUSH AX    ; Line 2
	L0:
    MOV BX, 5    ; Line 2
    POP AX    ; Line 2
	CMP AX, BX    ; Line 2
	JLE L1
    JMP L2
    L1:
    MOV AX, 7    ; Line 3
	;restore stack pointer
    ADD SP, 0	;restore base pointer
    POP BP
    RET 4
    JMP L3
    L2:
    L3:
    MOV BX, 2    ; Line 5
    MOV AX, [BP + 6]    ; Line 5
    SUB AX, BX    ; Line 5
    PUSH AX    ; Line 5
    POP AX
    PUSH AX
    MOV BX, 1    ; Line 5
    MOV AX, [BP + 4]    ; Line 5
    SUB AX, BX    ; Line 5
    PUSH AX    ; Line 5
    POP AX    ; Line 5
    PUSH AX    ; Line 5
    CALL foo    ; Line 5
    PUSH AX
    MOV BX, 1    ; Line 5
    MOV AX, [BP + 6]    ; Line 5
    SUB AX, BX    ; Line 5
    PUSH AX    ; Line 5
    POP AX
    PUSH AX
    MOV BX, 2    ; Line 5
    MOV AX, [BP + 4]    ; Line 5
    SUB AX, BX    ; Line 5
    PUSH AX    ; Line 5
    POP AX    ; Line 5
    PUSH AX    ; Line 5
    CALL foo    ; Line 5
    PUSH AX
    POP BX    ; Line 5
    MOV AX, 2    ; Line 5
    IMUL BL    ; Line 5
    PUSH AX    ; Line 5
    POP BX    ; Line 5
    POP AX    ; Line 5
    ADD AX, BX    ; Line 5
    PUSH AX    ; Line 5
    POP AX    ; Line 5
	;restore stack pointer
    ADD SP, 0	;restore base pointer
    POP BP
    RET 4
foo ENDP


new_line proc
    push ax
    push dx
    mov ah,2
    mov dl,0Dh
    int 21h
    mov ah,2
    mov dl,0Ah
    int 21h
    pop dx
    pop ax
    ret
new_line endp
print_output proc  ;print what is in ax
    push ax
    push bx
    push cx
    push dx
    push si
    lea si,number
    mov bx,10
    add si,4
    cmp ax,0
    jnge negate
print:
    xor dx,dx
    div bx
    mov [si],dl
    add [si],'0'
    dec si
    cmp ax,0
    jne print
    inc si
    lea dx,si
    mov ah,9
    int 21h
    pop si
    pop dx
    pop cx
    pop bx
    pop ax
    ret
negate:
    push ax
    mov ah,2
    mov dl,'-'
    int 21h
    pop ax
    neg ax
    jmp print
print_output endp

EN

