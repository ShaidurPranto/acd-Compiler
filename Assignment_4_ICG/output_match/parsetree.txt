start : program 	<Line: 1-10>
 program : program unit 	<Line: 1-10>
  program : unit 	<Line: 1-1>
   unit : var_declaration 	<Line: 1-1>
    var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 1-1>
     type_specifier : INT 	<Line: 1-1>
      INT : int	<Line: 1>
     declaration_list : ID LSQUARE CONST_INT RSQUARE 	<Line: 1-1>
      ID : k	<Line: 1>
      LSQUARE : [	<Line: 1>
      CONST_INT : 10	<Line: 1>
      RSQUARE : ]	<Line: 1>
     SEMICOLON : ;	<Line: 1>
  unit : func_definition 	<Line: 2-10>
   func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 2-10>
    type_specifier : INT 	<Line: 2-2>
     INT : int	<Line: 2>
    ID : main	<Line: 2>
    LPAREN : (	<Line: 2>
    RPAREN : )	<Line: 2>
    compound_statement : LCURL statements RCURL 	<Line: 2-10>
     LCURL : {	<Line: 2>
     statements : statements statement 	<Line: 3-9>
      statements : statements statement 	<Line: 3-6>
       statements : statements statement 	<Line: 3-5>
        statements : statements statement 	<Line: 3-4>
         statements : statement 	<Line: 3-3>
          statement : expression_statement 	<Line: 3-3>
           expression_statement : expression SEMICOLON 	<Line: 3-3>
            expression : variable ASSIGNOP logic_expression 	<Line: 3-3>
             variable : ID LSQUARE expression RSQUARE 	<Line: 3-3>
              ID : k	<Line: 3>
              LSQUARE : [	<Line: 3>
              expression : logic_expression 	<Line: 3-3>
               logic_expression : rel_expression 	<Line: 3-3>
                rel_expression : simple_expression 	<Line: 3-3>
                 simple_expression : term 	<Line: 3-3>
                  term : unary_expression 	<Line: 3-3>
                   unary_expression : factor 	<Line: 3-3>
                    factor : CONST_INT 	<Line: 3-3>
                     CONST_INT : 5	<Line: 3>
              RSQUARE : ]	<Line: 3>
             ASSIGNOP : =	<Line: 3>
             logic_expression : rel_expression 	<Line: 3-3>
              rel_expression : simple_expression 	<Line: 3-3>
               simple_expression : term 	<Line: 3-3>
                term : unary_expression 	<Line: 3-3>
                 unary_expression : factor 	<Line: 3-3>
                  factor : CONST_INT 	<Line: 3-3>
                   CONST_INT : 5	<Line: 3>
            SEMICOLON : ;	<Line: 3>
         statement : var_declaration 	<Line: 4-4>
          var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 4-4>
           type_specifier : INT 	<Line: 4-4>
            INT : int	<Line: 4>
           declaration_list : declaration_list COMMA ID 	<Line: 4-4>
            declaration_list : ID 	<Line: 4-4>
             ID : i	<Line: 4>
            COMMA : ,	<Line: 4>
            ID : j	<Line: 4>
           SEMICOLON : ;	<Line: 4>
        statement : expression_statement 	<Line: 5-5>
         expression_statement : expression SEMICOLON 	<Line: 5-5>
          expression : variable ASSIGNOP logic_expression 	<Line: 5-5>
           variable : ID 	<Line: 5-5>
            ID : i	<Line: 5>
           ASSIGNOP : =	<Line: 5>
           logic_expression : rel_expression 	<Line: 5-5>
            rel_expression : simple_expression 	<Line: 5-5>
             simple_expression : term 	<Line: 5-5>
              term : unary_expression 	<Line: 5-5>
               unary_expression : factor 	<Line: 5-5>
                factor : CONST_INT 	<Line: 5-5>
                 CONST_INT : 2	<Line: 5>
          SEMICOLON : ;	<Line: 5>
       statement : expression_statement 	<Line: 6-6>
        expression_statement : expression SEMICOLON 	<Line: 6-6>
         expression : variable ASSIGNOP logic_expression 	<Line: 6-6>
          variable : ID 	<Line: 6-6>
           ID : j	<Line: 6>
          ASSIGNOP : =	<Line: 6>
          logic_expression : rel_expression 	<Line: 6-6>
           rel_expression : simple_expression 	<Line: 6-6>
            simple_expression : term 	<Line: 6-6>
             term : unary_expression 	<Line: 6-6>
              unary_expression : factor 	<Line: 6-6>
               factor : CONST_INT 	<Line: 6-6>
                CONST_INT : 9	<Line: 6>
         SEMICOLON : ;	<Line: 6>
      statement : RETURN expression SEMICOLON 	<Line: 9-9>
       RETURN : return	<Line: 9>
       expression : logic_expression 	<Line: 9-9>
        logic_expression : rel_expression 	<Line: 9-9>
         rel_expression : simple_expression 	<Line: 9-9>
          simple_expression : term 	<Line: 9-9>
           term : unary_expression 	<Line: 9-9>
            unary_expression : factor 	<Line: 9-9>
             factor : CONST_INT 	<Line: 9-9>
              CONST_INT : 0	<Line: 9>
       SEMICOLON : ;	<Line: 9>
     RCURL : }	<Line: 10>
